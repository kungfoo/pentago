/*
 * ChatPanel.java
 *
 * Created on __DATE__, __TIME__
 */

package ch.pentago.ui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

import org.jdom.Document;
import org.jdom.Element;

import ch.pentago.client.ClientState;
import ch.pentago.client.receivers.ChallengeMessageReceiver;
import ch.pentago.client.receivers.ChatMessageReceiver;
import ch.pentago.client.receivers.ReplyMessageReceiver;
import ch.pentago.client.receivers.UserListMessageReceiver;
import ch.pentago.core.User;
import ch.pentago.network.NetworkException;
import ch.pentago.network.PacketFactory;
import ch.pentago.network.SocketMessagePublisherJob;

/**
 * 
 * @author __USER__
 */
public class ChatPanel extends javax.swing.JPanel implements Observer {

	private static final long serialVersionUID = 795652529269974508L;

	/** Creates new form ChatPanel */
	public ChatPanel() {
		initComponents();

		// Set up User List
		user_list.setModel(new UserListModel());
		user_list.setCellRenderer(new UserCellRenderer());

		// Set up Message List
		chat_messages.setCellRenderer(new ChatMessageRenderer());
		chat_messages.setModel(new DefaultListModel());

		// Set up Network Connection
		SocketMessagePublisherJob p = new SocketMessagePublisherJob(
				ClientState.currentUser);
		ClientState.setPublisher(p);
		UserListModel m = (UserListModel) user_list.getModel();
		p.subscribe(new UserListMessageReceiver(m), "userlist");
		p.subscribe(new ChatMessageReceiver(chat_messages), "chat");
		p.subscribe(new ChallengeMessageReceiver(), "request");
		p.subscribe(new ReplyMessageReceiver(), "reply");
		new Thread(ClientState.getPublisher()).start();

		icon_label.setIcon(new ImageIcon("themes/titlebar.png"));
		ClientState.inGame.addObserver(this);
	}

	public void update(Observable o, Object arg) {
		if (ClientState.inGame.get()) {
			challenge_button.setEnabled(false);
		} else {
			challenge_button.setEnabled(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		user_scollpane = new javax.swing.JScrollPane();
		user_list = new javax.swing.JList();
		message_label = new javax.swing.JLabel();
		message_text = new javax.swing.JTextField();
		send_button = new javax.swing.JButton();
		challenge_button = new javax.swing.JButton();
		chat_scrollpane = new javax.swing.JScrollPane();
		chat_messages = new javax.swing.JList();
		icon_label = new javax.swing.JLabel();
		jToolBar1 = new javax.swing.JToolBar();
		change_preferences_button = new javax.swing.JButton();
		about_button = new javax.swing.JButton();

		user_scollpane.setViewportView(user_list);

		message_label.setText("Message:");

		message_text.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				message_textKeyPressed(evt);
			}
		});

		send_button.setText("Send");
		send_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				send_buttonActionPerformed(evt);
			}
		});

		challenge_button.setText("Challenge");
		challenge_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				challenge_buttonActionPerformed(evt);
			}
		});

		chat_scrollpane.setViewportView(chat_messages);

		jToolBar1.setFloatable(false);
		change_preferences_button.setText("Change Preferences");
		change_preferences_button
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						change_preferences_buttonActionPerformed(evt);
					}
				});

		jToolBar1.add(change_preferences_button);

		about_button.setText("About");
		about_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				about_buttonActionPerformed(evt);
			}
		});

		jToolBar1.add(about_button);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												message_label)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												message_text,
																												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																												347,
																												Short.MAX_VALUE)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												send_button))
																						.add(
																								chat_scrollpane,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								486,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								user_scollpane,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								108,
																								Short.MAX_VALUE)
																						.add(
																								challenge_button,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								108,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																icon_label,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																600,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()).add(jToolBar1,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								624, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								layout
										.createSequentialGroup()
										.add(
												jToolBar1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												25,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED,
												20, Short.MAX_VALUE)
										.add(
												icon_label,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												100,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING,
																false)
														.add(user_scollpane)
														.add(
																chat_scrollpane,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																360,
																Short.MAX_VALUE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(message_label)
														.add(send_button)
														.add(
																message_text,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(challenge_button))
										.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	//GEN-FIRST:event_about_buttonActionPerformed
	private void about_buttonActionPerformed(java.awt.event.ActionEvent evt) {
		new AboutScreenWindow().setVisible(true);
	}//GEN-LAST:event_about_buttonActionPerformed

	//GEN-FIRST:event_change_preferences_buttonActionPerformed
	private void change_preferences_buttonActionPerformed(
			java.awt.event.ActionEvent evt) {
		new PreferencesFrame().setVisible(true);
	}//GEN-LAST:event_change_preferences_buttonActionPerformed

	// GEN-FIRST:event_challenge_buttonActionPerformed
	private void challenge_buttonActionPerformed(java.awt.event.ActionEvent evt) {
		User user = (User) user_list.getSelectedValue();
		// send game start message to server
		Document packet = new Document(new Element("packet"));
		Element request = new Element("request");
		packet.getRootElement().addContent(request);
		request.setAttribute("type", "challenge");
		request.setAttribute("source", ClientState.currentUser.getSessionId());
		request.setAttribute("destination", user.getSessionId());
		try {
			ClientState.currentUser.getStream().sendPacket(packet);
			ClientState.inGame.set(true);
		} catch (NetworkException e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_challenge_buttonActionPerformed

	// GEN-FIRST:event_send_buttonActionPerformed
	private void send_buttonActionPerformed(ActionEvent evt) {
		String text = message_text.getText();
		if (text.equals("")) {
			return;
		}
		try {
			Document packet = PacketFactory.createPacket(PacketFactory.CHAT);
			Element chat = packet.getRootElement().getChild("chat");
			chat.setAttribute("source", ClientState.currentUser.getSessionId());
			chat.setAttribute("destination", "all");
			chat.setText(text);
			ClientState.currentUser.getStream().sendPacket(packet);
			message_text.setText("");
		} catch (NetworkException e) {

			e.printStackTrace();
		}

	}// GEN-LAST:event_send_buttonActionPerformed

	// GEN-FIRST:event_message_textKeyPressed
	private void message_textKeyPressed(KeyEvent evt) {
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			send_button.doClick();
		}
	}// GEN-LAST:event_message_textKeyPressed

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton about_button;

	private javax.swing.JButton challenge_button;

	private javax.swing.JButton change_preferences_button;

	private javax.swing.JList chat_messages;

	private javax.swing.JScrollPane chat_scrollpane;

	private javax.swing.JLabel icon_label;

	private javax.swing.JToolBar jToolBar1;

	private javax.swing.JLabel message_label;

	private javax.swing.JTextField message_text;

	private javax.swing.JButton send_button;

	private javax.swing.JList user_list;

	private javax.swing.JScrollPane user_scollpane;
	// End of variables declaration//GEN-END:variables

}