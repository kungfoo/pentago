/*
 * GamePanel.java
 *
 * Created on __DATE__, __TIME__
 */

package ch.pentago.ui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import ch.pentago.client.ImageLoader;
import ch.pentago.core.LocalGame;
import ch.pentago.core.Square;
import ch.pentago.xml.UserConfigManager;

/**
 * 
 * @author __USER__
 */
public class SquareRenderer extends JPanel implements Observer {

	private static final long serialVersionUID = -7420709375172367618L;

	private boolean visible = false;

	private boolean enabled = true;

	private LocalGame game;
	
	private int squareNumber;
	
	private Square square;

	public SquareRenderer() {
		initComponents();
	}

	public void setGame(LocalGame game, int squareNumber) {
			this.game = game;
			this.squareNumber = squareNumber;
			square = game.getSquares()[squareNumber];
			square.addObserver(this);
			visible = true;
			repaint();
	}

	public Square getSquare() {
		return game.getSquares()[squareNumber];
	}

	public void rotateLeft() {
		game.doRotation(squareNumber, -1);
		repaint();
	}

	public void rotateRight() {
		game.doRotation(squareNumber, 1);
		repaint();
	}

	public void setEnabled(boolean b) {
		super.setEnabled(b);
		enabled = b;
	}

	public void update(Observable arg0, Object arg1) {
		repaint();
	}

	public void paint(Graphics g) {
		if (visible) {
			Image feld = ImageLoader.get("square.png");
			Image loch = ImageLoader.get("pocket.png");
			String mycolor = UserConfigManager.getUserConfigItem("client", "color");
			Image color1;
			Image color2;
			if(mycolor.equals("black")) {
				color1 = ImageLoader.get("black.png");
				color2 = ImageLoader.get("white.png");
			} else {
				color2 = ImageLoader.get("black.png");
				color1 = ImageLoader.get("white.png");
			}
			

			Graphics2D g2 = (Graphics2D) g;
			g2.clearRect(0, 0, getWidth(), getHeight());

			AffineTransform trans = new AffineTransform();

			trans.rotate(square.getRotation(), feld.getWidth(this) / 2, feld
					.getHeight(this) / 2);
			g2.drawImage(feld, trans, this);

			int offset = 5;
			int field = 50;

			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					Image draw;
					switch (square.getField(x, y)) {
					case 0:
						draw = loch;
						break;
					case 1:
						draw = color1;
						break;
					case 2:
						draw = color2;
						break;
					default:
						draw = null;
						break;
					}

					g.drawImage(draw, x * field + offset, y * field + offset,
							this);
				}
			}
		}
	}

	// GEN-FIRST:event_formMouseClicked
	private void formMouseClicked(java.awt.event.MouseEvent evt) {
		if (enabled) {
			int slice = 50;
			int x = evt.getX() / slice;
			int y = evt.getY() / slice;

			if (evt.getButton() == MouseEvent.BUTTON1) {
				if (square.getField(x, y) == 0) {
					game.doPlacement(squareNumber, x, y);
				}
			}

			repaint();
		}
	}// GEN-LAST:event_formMouseClicked

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {

		addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				formMouseClicked(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 451,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 433,
				Short.MAX_VALUE));
	}// </editor-fold>//GEN-END:initComponents

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	// End of variables declaration//GEN-END:variables

}